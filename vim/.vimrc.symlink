runtime! debian.vim " ensures that various options are properly set to work with the Vim-related packages in Debian. this sets nocompatible

" Usage {{{
" To use it, copy it to
" for Unix and OS/2: ~/.vimrc
" for Amiga: s:.vimrc
" for MS-DOS and Win32: $VIM\_vimrc
" for OpenVMS: sys$login:.vimrc
" }}}

" LANG {{{
" stackoverflow says it should be as up as possible, but it works anyways
language messages en_US.utf8
set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim    
" }}}

" Vundle Config {{{
" This should be on top
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
	"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
	"Plugin 'L9'
" Git plugin not hosted on GitHub
	"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
	"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
	"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
	"Plugin 'user/L9', {'name': 'newL9'}

" ADD YOUR PLUGINS HERE:
Plugin 'chriskempson/base16-vim'
"Plugin 'terryma/vim-smooth-scroll'
Plugin 'severin-lemaignan/vim-minimap'
Plugin 'jwhitley/vim-matchit' 				" http://www.catonmat.net/blog/vim-plugins-matchit-vim/
Plugin 'tpope/vim-surround'					" http://www.catonmat.net/blog/vim-plugins-surround-vim/
Plugin 'godlygeek/tabular' 					" needed by vim-markdown
Plugin 'plasticboy/vim-markdown'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
"Plugin 'coot/atp_vim' 						" for latex

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" }}}

" Plugins settings {{{
" vim-smooth-scroll
"noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
"noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 2)<CR>
"noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
"noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>

" Latex Box Plugin
let g:LatexBox_output_type="pdf"
let g:LatexBox_latexmk_async=1 					"allow latexmk to run in the background and load any compilation errors in a quickfix window after it finishes running.
let g:LatexBox_latexmk_preview_continuously=1 	"Latexmk will track the currently edited file for writes and recompile automatically when necessary
let g:LatexBox_quickfix=2 						" recommended by preview_continously
let g:LatexBox_latexmk_options="-pdflatex='xelatex --shell-escape -interaction=nonstopmode -synctex=1 %O %S' -cd -f"
let g:LatexBox_autojump=0 " auto jump to first error after compiling
" }}}

" Spaces & Tabs {{{
set tabstop=4       			" number of visual spaces per TAB
set autoindent smartindent		" copy indent from current line when starting a new line, smartindent
" }}}

" Filetype {{{
filetype on                   " Enable filetype detection
filetype indent on            " Enable filetype-specific indenting
filetype plugin on            " Enable filetype-specific plugins
" }}}

" Look and feel {{{
syntax on			" enable syntax processing
set background=dark "if using a dark background, for syntax highlighting
set number          " show line numbers
set relativenumber	" show relative numbers. can be on at the same time that number
set cursorline      " highlight current line
set showcmd			" Show (partial) command in status line
set wildmenu        " visual autocomplete for command menu
set showmatch		" Highlight matching brackets
set mouse=a			" Enable mouse usage (all modes)
set ruler 			" show the cursor position and line number at the bar 
"set lazyredraw      " don't redraw while in macros 
set scrolloff=5		" keep at least 5 lines above/below
set sidescrolloff=5 " keep at least 5 lines left/right
set wrap			" soft wrap long lines
set noerrorbells	" no error bells please
set visualbell
set vb t_vb=		" no beep or flash 
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb= 	"redo t_vb= for gui so it takes place
endif
"set list                        " show invisible characters
"set listchars=tab:>·,trail:·    " but only show tabs and trailing whitespace
set timeout			" time out on key codes
set ttimeoutlen=100 " The time in milliseconds that is waited for a key code or mapped key sequence to complete

let base16colorspace=256  	" Access colors present in 256 colorspace
if has("gui_running")
	colorscheme base16-colors
	set guioptions-=T		" Remove Toolbar
	set guioptions+=c		" Use console dialogs 
	"set guioptions-=r		" Remove right-hand scrollbar 

	if has("gui_gtk2")
		"set guifont=Monospace\ 10
    	"set guifont=DejaVu\ Sans\ Mono\ 10
		set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
		let Powerline_symbols = 'fancy'
		"set guifont=Terminus\ 9 "Terminus is AWESOME
  	elseif has("gui_macvim")
    	set guifont=Menlo\ Regular:h14
  	elseif has("gui_win32")
    	set guifont=Consolas:h11:cANSI
  	endif
else
	colorscheme base16-colors
endif

" Allow color schemes to do bright colors without forcing bold.
"if &t_Co == 8 && $TERM !~# '^linux'
"	set t_Co=16
"endif

" }}}

" Line wrap {{{
set textwidth=80    	" we like 80 columns
"set formatoptions=tcrql " t autowrap to textwidth
						" c autowrap comments to textwidth
						" r autoinsert comment leader with <enter>
						" q allow formatting of comments with gq
						" don't format already long lines
" set colorcolumn=+1        " highlight column after 'textwidth'
" set colorcolumn=+1,+2,+3  " highlight three columns after 'textwidth'
" highlight ColorColumn ctermbg=gray guibg=lightgrey
" }}}

" Searching {{{
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch        " highlight matches
" }}}

" Mappings {{{
" This is totally awesome - remap jj to escape in insert mode.  You'll never type jj anyway, so it's great!
inoremap jj <Esc>
" Open Url on this line with the browser \w . Eg: http://www.google.com
map <Leader>w :call Browser ()<CR>
" }}}

" Folding {{{
"set foldmethod=marker	" fold based on marker level
"set foldnestmax=10 	" max 10 depth
set nofoldenable  		" don't fold files by default on open
"set foldlevelstart=10 	" start with fold level of 1
" }}}

" Launch {{{
set encoding=utf8
set autowrite		" Automatically save before commands like :next and :make
"set autochdir		" automatically cd into the directory that the file is in
set autoread		" watch for file changes
set modeline	 	" make vim check beginning and ending lines of files for options
" jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" }}}

" Open URL in browser {{{
function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "!firefox " .line
endfunction

"}}}

" Reload configs {{{
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END
" }}}

" TODO
" reopen buffers: http://vim.wikia.com/wiki/Vim_buffer_FAQ
" xclipboard: "+ or "* registers
" nerdtree
" autocomplete
" sublime text multiple cursors
" remapear :
" tmux con colores, el plugin falla
" smooth scroll
" matchit.vim
" https://github.com/garbas/vim-snipmate

" vim:foldmethod=marker:foldlevel=0
