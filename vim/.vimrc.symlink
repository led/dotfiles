runtime! debian.vim " ensures that various options are properly set to work with the Vim-related packages in Debian. this sets nocompatible

" Vundle Config {{{
" This should be on top
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
	"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
	"Plugin 'L9'
" Git plugin not hosted on GitHub
	"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
	"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
	"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
	"Plugin 'user/L9', {'name': 'newL9'}

Plugin 'chriskempson/base16-vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" }}}

" Usage {{{
" To use it, copy it to
" for Unix and OS/2: ~/.vimrc
" for Amiga: s:.vimrc
" for MS-DOS and Win32: $VIM\_vimrc
" for OpenVMS: sys$login:.vimrc
" }}}

" Spaces & Tabs {{{
set tabstop=4       			" number of visual spaces per TAB
set autoindent smartindent		" copy indent from current line when starting a new line, smartindent
" }}}

" Filetype {{{
filetype on                   " Enable filetype detection
filetype indent on            " Enable filetype-specific indenting
filetype plugin on            " Enable filetype-specific plugins
" }}}

" Look and feel {{{
syntax on			" enable syntax processing
set background=dark	"if using a dark background, for syntax highlighting
set number          " show line numbers
set cursorline      " highlight current line
set showcmd			" Show (partial) command in status line
set wildmenu        " visual autocomplete for command menu
set showmatch		" Highlight matching brackets
set mouse=a			" Enable mouse usage (all modes)
set ruler 			" show the cursor position and line number at the bar 
set lazyredraw      " don't redraw while in macros 
set scrolloff=7		" keep at least 5 lines above/below
set sidescrolloff=7 " keep at least 5 lines left/right
set wrap			" soft wrap long lines
set noerrorbells	" no error bells please
set visualbell
set vb t_vb=		"no beep or flash 
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb= 	"redo t_vb= for gui so it takes place
endif
"set list                        " show invisible characters
"set listchars=tab:>·,trail:·    " but only show tabs and trailing whitespace
set timeout			" time out on key codes
set ttimeoutlen=100 " The time in milliseconds that is waited for a key code or mapped key sequence to complete

if has("gui_running")
	colorscheme base16-default 
	set guioptions-=T		" Remove Toolbar
	"set guifont=Terminus\ 9 "Terminus is AWESOME
else
	colorscheme base16-default 
endif

" Allow color schemes to do bright colors without forcing bold.
"if &t_Co == 8 && $TERM !~# '^linux'
"	set t_Co=16
"endif

" }}}

" Line wrap {{{
set textwidth=80    	" we like 80 columns
"set formatoptions=tcrql " t autowrap to textwidth
						" c autowrap comments to textwidth
						" r autoinsert comment leader with <enter>
						" q allow formatting of comments with gq
						" don't format already long lines
" set colorcolumn=+1        " highlight column after 'textwidth'
" set colorcolumn=+1,+2,+3  " highlight three columns after 'textwidth'
" highlight ColorColumn ctermbg=gray guibg=lightgrey
" }}}

" Searching {{{
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch        " highlight matches
" }}}

" Mappings {{{
" This is totally awesome - remap jj to escape in insert mode.  You'll never type jj anyway, so it's great!
inoremap jj <Esc>
" Open Url on this line with the browser \w . Eg: http://www.google.com
map <Leader>w :call Browser ()<CR>
" }}}

" Folding {{{
set foldmethod=marker	" fold based on marker level
set foldnestmax=10 " max 10 depth
set foldenable " don't fold files by default on open
set foldlevelstart=10 " start with fold level of 1
" }}}

" Launch {{{
set autowrite		" Automatically save before commands like :next and :make
set autochdir		" automatically cd into the directory that the file is in
set autoread		" watch for file changes
set modeline	 	" make vim check beginning and ending lines of files for options
" jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" }}}

" Open URL in browser {{{
function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "!firefox " .line
endfunction

"}}}

" TODO
" poner zsh como shell

" vim:foldmethod=marker:foldlevel=0
